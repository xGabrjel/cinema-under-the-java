plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagement}"
	id 'jacoco'
}

group = 'com'
version = '1.0'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.flywaydb:flyway-core'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation "com.itextpdf:itextpdf:${itextpdfVersion}"
	implementation "net.glxn:qrgen:${qrgenVersion}"
	implementation "com.google.zxing:core:${zxingVersion}"
	implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:${jasyptVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${starterMvcVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${mapstructBindingVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
	testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy jacocoTestReport
}

bootJar {
	archiveFileName = "justAchieve-docker.${archiveExtension.get()}"
}

jar {
	enabled = false
}

jacoco {
	toolVersion = "${jacocoToolVersion}"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('htmlJacocoReport')
	}
}

compileJava.options.encoding = 'UTF-8'